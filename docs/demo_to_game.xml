<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>V-Sekai - Manuals</title>
<link>https://v-sekai.github.io/manuals/demo_to_game.html</link>
<atom:link href="https://v-sekai.github.io/manuals/demo_to_game.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.553</generator>
<lastBuildDate>Wed, 24 Apr 2024 03:19:20 GMT</lastBuildDate>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/000_ingest_validate.html</link>
  <description><![CDATA[ 




<section id="prototype-0-push-an-asset-to-a-service" class="level2">
<h2 class="anchored" data-anchor-id="prototype-0-push-an-asset-to-a-service">Prototype 0: Push an Asset to a Service</h2>
<p>This prototype involves pushing an asset to a service with sanitization and validation. The service will separate the Node3D, colliders, and skeletons. Then, the game server pulls those elements in.</p>
<section id="input" class="level3">
<h3 class="anchored" data-anchor-id="input">Input</h3>
<p>The input for this prototype is either a Godot text scene or a Godot binary scene.</p>
</section>
<section id="data-structures" class="level3">
<h3 class="anchored" data-anchor-id="data-structures">Data Structures</h3>
<p>There are two primary data structures used in this prototype:</p>
<ul>
<li>An Elixir structure representing a Godot Scene.</li>
<li>An Elixir structure that represents the list of validations for 3D modeling and animation.</li>
</ul>
<section id="godot-scene" class="level4">
<h4 class="anchored" data-anchor-id="godot-scene">Godot Scene</h4>
<p>The Godot Scene does the following:</p>
<ol type="1">
<li>Reconstructs a virtual tree from a flat array of nodes to prevent node paths from breaking out of the scene.</li>
<li>Strips resources like gdscripts in the packed scene using an allowlist.</li>
</ol>
</section>
<section id="node3d-validations" class="level4">
<h4 class="anchored" data-anchor-id="node3d-validations">Node3D Validations</h4>
<p>The Node3D Validations include:</p>
<ol type="1">
<li><strong>Validate Node3D Naming Suffix</strong>: This confirms that the naming suffix for Node3D is correct.</li>
<li><strong>Validate Unique Names</strong>: This verifies that all names in the Node3D are unique.</li>
</ol>
</section>
<section id="colliders-validations" class="level4">
<h4 class="anchored" data-anchor-id="colliders-validations">Colliders Validations</h4>
<p>The Colliders Validations include:</p>
<ol type="1">
<li><strong>Validate Collider Shape</strong>: This ensures each collider has a valid shape assigned.</li>
<li><strong>Validate Collider Position</strong>: This checks that each collider’s position is within the expected range.</li>
<li><strong>Validate Collider Size</strong>: This confirms that each collider’s size is within the desired range.</li>
</ol>
</section>
<section id="skeleton-validations" class="level4">
<h4 class="anchored" data-anchor-id="skeleton-validations">Skeleton Validations</h4>
<p>The Skeleton Validations include:</p>
<ol type="1">
<li><strong>Validate Skeleton Bones</strong>: This ensures that each bone in the skeleton is connected to at least one other bone.</li>
<li><strong>Validate Skeleton Bind Pose</strong>: This checks that the bind pose of the skeleton is correctly defined.</li>
<li><strong>Validate Skeleton Weight Painting</strong>: This confirms that the weight painting of the skeleton is perfectly done.</li>
</ol>
</section>
</section>
<section id="output" class="level3">
<h3 class="anchored" data-anchor-id="output">Output</h3>
<p>The output for this prototype is a Godot Scene.</p>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/000_ingest_validate.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/001_push.html</link>
  <description><![CDATA[ 




<section id="prototype-1-element-instantiation-and-uploading" class="level1">
<h1>Prototype 1: Element Instantiation and Uploading</h1>
<p>This prototype involves two main steps:</p>
<section id="instantiating-elements-into-the-virtual-world" class="level2">
<h2 class="anchored" data-anchor-id="instantiating-elements-into-the-virtual-world">Instantiating Elements into the Virtual World</h2>
<p>This prototype’s first part focuses on instantiating elements into our virtual world. These elements will be available for user interaction.</p>
<section id="elements-include" class="level3">
<h3 class="anchored" data-anchor-id="elements-include">Elements include:</h3>
<ol type="1">
<li><strong>Colliders</strong>: These are invisible objects that simulate solid matter.</li>
<li><strong>Per Bone Capsules</strong>: These are simplified user avatars used for collision detection.</li>
</ol>
</section>
</section>
<section id="pulling-elements-for-user-interaction" class="level2">
<h2 class="anchored" data-anchor-id="pulling-elements-for-user-interaction">Pulling Elements for User Interaction</h2>
<p>After instantiation, these elements will be pulled for user interaction. This allows users to interact with the colliders and per-bone capsules within the virtual environment.</p>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/001_push.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/002_packaging_marker3D_and_quad_plane.html</link>
  <description><![CDATA[ 




<section id="prototype-2-packaging-marker3d-and-quad-plane" class="level1">
<h1>Prototype 2: Packaging, Marker3D, and Quad Plane</h1>
<p>This prototype involves several key components:</p>
<section id="packaging-colliders-and-per-bone-capsules" class="level2">
<h2 class="anchored" data-anchor-id="packaging-colliders-and-per-bone-capsules">Packaging Colliders and Per Bone Capsules</h2>
<p>This prototype’s first part focuses on packaging colliders and per-bone capsules. These elements will be prepared for upload/download processes.</p>
</section>
<section id="introduction-of-marker3d" class="level2">
<h2 class="anchored" data-anchor-id="introduction-of-marker3d">Introduction of Marker3D</h2>
<p>We will introduce a <code>Marker3D</code> at coordinates <code>(0, 0, 1)</code>. This will serve as a reference point in the 3D space.</p>
</section>
<section id="addition-of-quad-plane" class="level2">
<h2 class="anchored" data-anchor-id="addition-of-quad-plane">Addition of Quad Plane</h2>
<p>Lastly, we will add a quadplane to our virtual world. This will serve as a primary surface or platform within the environment.</p>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/002_packaging_marker3D_and_quad_plane.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/003_tree.html</link>
  <description><![CDATA[ 




<section id="prototype-3-tree-concept-decision-and-texture-packaging" class="level2">
<h2 class="anchored" data-anchor-id="prototype-3-tree-concept-decision-and-texture-packaging">Prototype 3: Tree Concept Decision and Texture Packaging</h2>
<p>This prototype is divided into two main parts:</p>
<section id="part-1-tree-concept-decision" class="level3">
<h3 class="anchored" data-anchor-id="part-1-tree-concept-decision">Part 1: Tree Concept Decision</h3>
<p>In this part, we will make a decision between the following concepts:</p>
<ul>
<li><p><strong>GLTF2 Concept of a Unified Node Tree</strong>: This is one of the options we are considering.</p></li>
<li><p><strong>Godot Engine / Blender Concept of Armatures</strong>: This is the alternative option under consideration.</p></li>
</ul>
</section>
<section id="part-2-texture-packaging" class="level3">
<h3 class="anchored" data-anchor-id="part-2-texture-packaging">Part 2: Texture Packaging</h3>
<p>Once the tree concept decision has been made, we will move on to the packaging of various elements at the marker. These include:</p>
<ul>
<li>Textures</li>
<li>Materials</li>
<li>Meshes</li>
<li>IDs</li>
</ul>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/003_tree.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/004_object_uploads_and_positioning.html</link>
  <description><![CDATA[ 




<section id="prototype-4-object-uploads-and-positioning" class="level2">
<h2 class="anchored" data-anchor-id="prototype-4-object-uploads-and-positioning">Prototype 4: Object Uploads and Positioning</h2>
<p>This prototype is divided into two main sections:</p>
<section id="part-1-object-uploads" class="level3">
<h3 class="anchored" data-anchor-id="part-1-object-uploads">Part 1: Object Uploads</h3>
<p>In this part, we will develop the capability to upload various objects. These include:</p>
<ul>
<li>A teacup (which could possibly be a collider)</li>
<li>An avatar</li>
</ul>
</section>
<section id="part-2-object-positioning" class="level3">
<h3 class="anchored" data-anchor-id="part-2-object-positioning">Part 2: Object Positioning</h3>
<p>Once the objects have been uploaded, users will have the ability to manipulate these objects in the following ways:</p>
<ul>
<li>Dragging</li>
<li>Scaling</li>
</ul>
<p>The objects will have the following properties:</p>
<ul>
<li><strong>Name</strong>: The name of the object.</li>
<li><strong>User_UID</strong>: The unique identifier for the user.</li>
<li><strong>Attachments</strong>: This includes:
<ul>
<li>Avatar (which consists of materials, meshes, animations)</li>
<li>Colliders</li>
</ul></li>
<li><strong>Scale</strong>: The scale of the object.</li>
<li><strong>Skeleton</strong>: The skeleton structure of the object.</li>
</ul>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/004_object_uploads_and_positioning.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/005_servers_and_script.html</link>
  <description><![CDATA[ 




<section id="prototype-5-server-management-and-scripting" class="level2">
<h2 class="anchored" data-anchor-id="prototype-5-server-management-and-scripting">Prototype 5: Server Management and Scripting</h2>
<p>This prototype is divided into two main sections:</p>
<section id="part-1-server-management" class="level3">
<h3 class="anchored" data-anchor-id="part-1-server-management">Part 1: Server Management</h3>
<p>In this part, we will focus on various server management considerations. These include:</p>
<ul>
<li>Handling server downtime</li>
<li>Managing user logouts/logins</li>
</ul>
</section>
<section id="part-2-scripting" class="level3">
<h3 class="anchored" data-anchor-id="part-2-scripting">Part 2: Scripting</h3>
<p>In the second part of this prototype, we will incorporate scripting into the system. This will allow for more dynamic and interactive functionalities.</p>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/005_servers_and_script.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/006_physics.html</link>
  <description><![CDATA[ 




<section id="prototype-6-physics" class="level2">
<h2 class="anchored" data-anchor-id="prototype-6-physics">Prototype 6: Physics</h2>
<p>The sixth prototype is dedicated to implementing physics in our virtual world. This will be broken down into two main sections:</p>
<section id="part-1-understanding-physics" class="level3">
<h3 class="anchored" data-anchor-id="part-1-understanding-physics">Part 1: Understanding Physics</h3>
<p>This section will delve into the basic understanding of physics and how it applies to our virtual world.</p>
</section>
<section id="part-2-implementation" class="level3">
<h3 class="anchored" data-anchor-id="part-2-implementation">Part 2: Implementation</h3>
<p>This part will focus on the actual implementation of physics into our virtual environment. We will discuss the challenges faced and the solutions implemented.</p>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/006_physics.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/007_capacity_limits.html</link>
  <description><![CDATA[ 




<section id="prototype-7-server-capacity-and-bandwidth-limit" class="level2">
<h2 class="anchored" data-anchor-id="prototype-7-server-capacity-and-bandwidth-limit">Prototype 7: Server Capacity and Bandwidth Limit</h2>
<p>The seventh and final prototype is focused on server capacity and bandwidth limit and is divided into two main sections:</p>
<section id="part-1-server-capacity" class="level3">
<h3 class="anchored" data-anchor-id="part-1-server-capacity">Part 1: Server Capacity</h3>
<p>In this section, we will work towards ensuring that the server can handle up to 100 people per instance.</p>
</section>
<section id="part-2-bandwidth-and-objectmesh-complexity-limit" class="level3">
<h3 class="anchored" data-anchor-id="part-2-bandwidth-and-objectmesh-complexity-limit">Part 2: Bandwidth and Object/Mesh Complexity Limit</h3>
<p>Game optimization will involve calculating the bandwidth and determining the object/mesh complexity limit.</p>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/007_capacity_limits.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/070_packet_format.html</link>
  <description><![CDATA[ 




<section id="variable-bit-rate-encoding" class="level1">
<h1>Variable bit rate encoding</h1>
<p>The strategy we want to use is called variable bit rate encoding to optimize bandwidth use.</p>
<p>In the context of our game, this strategy can be applied to reduce the amount of data that needs to be sent over the network for each snapshot. Here’s how it could work with our <code>TimeOffsetPacket</code> and <code>DataPacket</code> structures:</p>
<ol type="1">
<li><p><strong>Keyframe Omission</strong>: Instead of sending a full update (a keyframe) for every frame, you only send keyframes at specific intervals. In between these keyframes, you send more minor updates (delta frames) that describe how the game state has changed since the last keyframe. This is where the <code>frame_within_metablock</code> and <code>frame_offset</code> fields come into play. They allow you to specify which keyframe a particular delta frame is relative to.</p></li>
<li><p><strong>Interpolation</strong>: On the receiving end, the game client uses the data from the keyframes and delta frames to interpolate the game state for the frames in between. This means that even though you send less data, the client can still produce a smooth animation. The <code>x_offset</code>, <code>y_offset</code>, and <code>z_offset</code> fields in the <code>DataPacket</code> structure are used for this purpose. They provide the information needed to calculate the position of an entity at any given frame.</p></li>
<li><p><strong>Variable Bit Rate Encoding</strong>: The <code>time_bit_width</code>, <code>x_bit_width</code>, <code>y_bit_width</code>, and <code>z_bit_width</code> fields in the <code>TimeOffsetPacket</code> structure allow you to use different amounts of bits for different types of data. For example, if an entity’s x, y, and z positions don’t change much from one frame to the next, you might use fewer bits to represent these values. This can help to reduce the size of your snapshots further.</p></li>
<li><p><strong>Octahedral Compression</strong>: The rotation of the rigid bodies is stored as an octahedral normal, which is a very efficient way to represent 3D rotations. This can significantly reduce the data needed to represent the orientation of each rigid body.</p></li>
</ol>
<section id="entity" class="level2">
<h2 class="anchored" data-anchor-id="entity">Entity</h2>
<p>Given the <code>Entity</code> struct:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> TimeOffsetPacket <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint16_t</span> frame_within_metablock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Bits 0-15</span></span>
<span id="cb1-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint8_t</span> time_bit_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Bits 16-19</span></span>
<span id="cb1-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint8_t</span> x_bit_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Bits 20-23</span></span>
<span id="cb1-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint8_t</span> y_bit_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Bits 24-27</span></span>
<span id="cb1-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint8_t</span> z_bit_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Bits 28-31</span></span>
<span id="cb1-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint32_t</span> byte_offset_to_first_packet<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Bits 0-23 of high word</span></span>
<span id="cb1-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint8_t</span> amount_of_packets_that_follow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Bits 24-31 of high word</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> DataPacket <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint16_t</span> base_x_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// bits 0-15</span></span>
<span id="cb1-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint16_t</span> base_y_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// bits 16-31</span></span>
<span id="cb1-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint16_t</span> base_z_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// bits 32-47</span></span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The following fields are bit-compressed</span></span>
<span id="cb1-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint16_t</span> frame_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [Time bit width] (unsigned)</span></span>
<span id="cb1-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int16_t</span> x_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [X bit width] (signed)</span></span>
<span id="cb1-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int16_t</span> y_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [Y bit width] (signed)</span></span>
<span id="cb1-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int16_t</span> z_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [Z bit width] (signed)</span></span>
<span id="cb1-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Given values</span></span>
<span id="cb2-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size_of_time_offset_packet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size_of_data_packet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> total_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1596</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> packets_per_entity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> packets_per_bone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the number of DataPackets we can store after accounting for one TimeOffsetPacket</span></span>
<span id="cb2-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> data_packet_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>total_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> size_of_time_offset_packet<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> size_of_data_packet<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This will be 113</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the number of DataPackets we can store after accounting for the entity's position, orientation, linear_velocity and angular_velocity</span></span>
<span id="cb2-12">data_packet_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_packet_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> packets_per_entity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This will be 109</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Now, let's solve for the number of bones</span></span>
<span id="cb2-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> total_bones <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_packet_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> packets_per_bone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This will be 54</span></span></code></pre></div>
<ol type="1">
<li><code>TimeOffsetPacket</code></li>
<li>A complete RigidBody structure on the server consists of position, orientation, linear_velocity, and angular_velocity.</li>
<li>Rotation is stored as x/y is an octahedral normal storing axis, while z is the rotation. Converting from this to quaternion is highly efficient.</li>
<li>A bone is similar to a rigid body.</li>
<li>We omit frames for the worst representation to represent a user at distances.</li>
<li>Let’s assume all bones are in constant motion at all times.</li>
<li>We can pretend an entity is a skeleton without bones, which will work out since a skeleton is a Node3D.</li>
</ol>
</section>
<section id="unknowns" class="level2">
<h2 class="anchored" data-anchor-id="unknowns">Unknowns</h2>
<p>Define some character limitations for the skeleton.</p>
<p>We need to define that before we start coding on it, or else you will be chasing a very long ouroboros, and it will come back to bite you.</p>
<p>Distance limitations: the farther you get, the higher the positional precision losses will cause issues with converting for math.</p>
<p>Also, we need an ID system for player info.</p>
<p>Max number of bones, min number of bones, bone important so as you move farther away, the # of bones decreases in association to what information you need to send.</p>
<p>The limitation boundaries are based on distance from the player.</p>
</section>
<section id="targets" class="level2">
<h2 class="anchored" data-anchor-id="targets">Targets</h2>
<p>For AAA game development, target $2.50 to USD 3 per user per server per month.</p>
<p>00knight at Winter Pixel Games tries to keep each player’s state update under 1.2 kilobytes. So 1.2 kilobytes x 30hz x number of players + whatever metadata is transferred at a lesser rate.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ol type="1">
<li><a href="https://gafferongames.com/post/serialization_strategies/">Serialization Strategies</a></li>
<li><a href="https://www.youtube.com/watch?v=sx4IIQL0x7c">Networked Physics in Virtual Reality</a></li>
<li><a href="https://github.com/godotengine/godot-proposals/issues/3375">Godot Engine Proposal</a></li>
<li><a href="https://aws.amazon.com/blogs/gametech/how-to-host-your-unreal-engine-game-for-under-1-per-player-with-amazon-gamelift/">Host your Unreal Engine game for under $1 USD</a></li>
</ol>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/070_packet_format.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/071_lod_strategy.html</link>
  <description><![CDATA[ 




<section id="lod" class="level1">
<h1>LOD</h1>
<p>Instead of the entire body, you only get the base packet and a popup cardboard.</p>


</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/071_lod_strategy.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/080_validations.html</link>
  <description><![CDATA[ 




<section id="godot-scene" class="level1">
<h1>Godot Scene</h1>
<ol type="1">
<li>Reconstructs a virtual tree from a flat array of nodes to prevent node paths from breaking out of the scene.</li>
<li>Strips resources like gdscripts in the packed scene using an allowlist.</li>
<li>Handles different scenes differently based on their context:
<ul>
<li>Avatar or maps</li>
<li>Applies different allowlists</li>
<li>Allows 2D nodes only if they’re part of another viewport.</li>
</ul></li>
</ol>
<section id="mesh-vertex-attributes" class="level4">
<h4 class="anchored" data-anchor-id="mesh-vertex-attributes">Mesh Vertex Attributes</h4>
<ol type="1">
<li><strong>Validate Mesh Vertices Have Edges</strong>: Ensure each vertex in the mesh is connected to at least one edge.</li>
<li><strong>Validate Mesh Has Overlapping UVs</strong>: Check if any UV coordinates in the mesh overlap.</li>
<li><strong>Validate Mesh Single UV Set</strong>: Confirm that the mesh only has one set of UV coordinates.</li>
<li><strong>Validate Mesh Has UVs</strong>: Verify that the mesh has UV coordinates.</li>
<li><strong>Validate Mesh No Co-Planar Faces</strong>: Ensure that no faces in the mesh lie on the same plane.</li>
<li><strong>Validate Mesh Ngons</strong>: Check for polygons with more than four sides in the mesh.</li>
<li><strong>Validate Mesh Non-Manifold</strong>: Confirm that the mesh has no non-manifold geometry.</li>
<li><strong>Validate Mesh No Negative Scale</strong>: Ensure the mesh scale is not negative.</li>
<li><strong>Validate Mesh Edge Length is Non-Zero</strong>: Verify that all edges in the mesh have a length greater than zero.</li>
<li><strong>Validate Mesh Normals Unlocked</strong>: Check that the mesh’s normals are not locked and can be modified.</li>
<li><strong>Validate Mesh UV Set Map 1</strong>: Confirm that the first UV set map of the mesh is correctly configured.</li>
<li><strong>Validate if Mesh is Triangulated</strong>: Ensure the mesh is composed entirely of triangular faces.</li>
</ol>
</section>
<section id="material" class="level4">
<h4 class="anchored" data-anchor-id="material">Material</h4>
<ol start="13" type="1">
<li><strong>Validate Color Sets</strong>: Check that the color sets used in the material are valid.</li>
<li><strong>Validate Model’s default UV is set and exists</strong>: Confirm the model has a default UV set.</li>
</ol>
</section>
<section id="general" class="level4">
<h4 class="anchored" data-anchor-id="general">General</h4>
<ol start="15" type="1">
<li><strong>Validate Model Name</strong>: Ensure that the model has a valid name.</li>
<li><strong>Validate Model Content</strong>: Check that the content of the model exists.</li>
<li><strong>Validate Node3D Naming Suffix</strong>: Confirm that the naming suffix for Node3D is correct.</li>
<li><strong>Validate No Node3D Transforms</strong>: Check that the model has no null or empty Node3D transforms.</li>
<li><strong>Validate No Unknown Nodes</strong>: Confirm no unknown nodes in the model.</li>
<li><strong>Validate Node No Shadowing</strong>: Verify no shadowing names on any node.</li>
<li><strong>Validate Shape Default Names</strong>: Ensure that the default shape names are valid.</li>
<li><strong>Validate Shape Render Stats</strong>: Check the render statistics for each shape.</li>
<li><strong>Validate Shape Zero</strong>: Confirm that the zero position for each shape is correctly set.</li>
<li><strong>Validate Transform Zero</strong>: Ensure that the zero position for each transform is correctly set.</li>
<li><strong>Validate Unique Names</strong>: Verify that all names in the model are unique.</li>
</ol>
</section>
<section id="animations" class="level4">
<h4 class="anchored" data-anchor-id="animations">Animations</h4>
<ol start="28" type="1">
<li><strong>Validate No Animation</strong>: Check that there are no animations in the model.</li>
<li><strong>Ensure no keyframes on nodes in the Instance</strong>: Confirm that there are no keyframes on any nodes in the instance.</li>
</ol>
</section>
<section id="output" class="level3">
<h3 class="anchored" data-anchor-id="output">Output</h3>
<ol type="1">
<li>Output Godot Scene</li>
</ol>
<p>Before the game client/server architecture is sound, we need to be able to push an asset to a service with sanitization and validation. This service will separate the colliders and other elements. Then, the game server pulls those colliders in.</p>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/080_validations.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/090_basic_tooling.html</link>
  <description><![CDATA[ 




<p>Sure, here’s a simplified version of your document:</p>
<section id="basic-tooling-bill-of-materials" class="level1">
<h1>Basic Tooling: Bill of Materials</h1>
<p>This section outlines the essential tools we use in our VR world architecture.</p>
<section id="vr-software" class="level2">
<h2 class="anchored" data-anchor-id="vr-software">VR Software</h2>
<p>We utilize:</p>
<ol type="1">
<li><strong>Godot Engine</strong>: An open-source game engine supporting both 2D and 3D games as well as interactive experiences.</li>
<li><strong>Blender</strong>: A comprehensive, free, and open-source 3D creation suite.</li>
</ol>
</section>
<section id="file-formats" class="level2">
<h2 class="anchored" data-anchor-id="file-formats">File Formats</h2>
<p>We adhere to the following standards for 3D models:</p>
<ul>
<li><strong>glTF (GL Transmission Format)</strong>: A standard file format for three-dimensional scenes and models. – <strong>VRM</strong>: A 3D avatar file format based on glTF 2.0 for VR applications.</li>
<li><strong>Godot Scene (.tscn)</strong>: Godot’s native scene format.</li>
</ul>
</section>
<section id="software-languages" class="level2">
<h2 class="anchored" data-anchor-id="software-languages">Software Languages</h2>
<p>Software languages are indispensable for infusing interactivity into our VR worlds:</p>
<ul>
<li><strong>C++</strong></li>
<li><strong>GDScript</strong>: The native scripting language for Godot Engine.</li>
<li><strong>Elixir</strong></li>
</ul>
</section>
<section id="infrastructure-automation-tools" class="level2">
<h2 class="anchored" data-anchor-id="infrastructure-automation-tools">Infrastructure Automation Tools</h2>
<p>To manage and automate our infrastructure, we use:</p>
<ul>
<li><strong>OpenTofu</strong>: An open-source infrastructure as a code software tool.</li>
<li><strong>VictoriaMetrics</strong>: A fast, cost-effective, and scalable time series database.</li>
</ul>
</section>
<section id="local-and-cloud-storage" class="level2">
<h2 class="anchored" data-anchor-id="local-and-cloud-storage">Local and Cloud Storage</h2>
<p>For local storage, we use:</p>
<ul>
<li><strong>SeaweedFS</strong>: A simple and highly scalable distributed file system.</li>
</ul>
<p>For cloud storage, we use:</p>
<ul>
<li><strong>Cloud’s S3 Compatible Storage</strong>: Many cloud service providers offer storage solutions compatible with the S3 API.</li>
</ul>
</section>
<section id="database" class="level2">
<h2 class="anchored" data-anchor-id="database">Database</h2>
<p>Our choice for database management is <strong>CockroachDB</strong>, an open-source, distributed SQL database.</p>
</section>
<section id="hardware" class="level2">
<h2 class="anchored" data-anchor-id="hardware">Hardware</h2>
<p>To test and experience our virtual worlds, VR hardware is essential:</p>
<ul>
<li><strong>VR Headsets</strong>: Devices like the Meta Quest 2, Meta Quest 3, Beyond HMD, or Valve Index.</li>
<li><strong>Controllers</strong>: These devices facilitate user interaction with the virtual environment.</li>
<li><strong>VR GPUs</strong>: Graphics processing units for rendering VR content.</li>
</ul>
</section>
<section id="performance-testing" class="level2">
<h2 class="anchored" data-anchor-id="performance-testing">Performance Testing</h2>
<p>Load test our VR world architecture. It simulates a user-defined number of users to stress test a URL.</p>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/090_basic_tooling.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/110_peer_platforms.html</link>
  <description><![CDATA[ 




<section id="platforms-of-note" class="level1">
<h1>Platforms of Note</h1>
<p>Some platforms from a “Frequently Used Social VR” presentation from the “Social VR Lifestyle Survey 2023”. It’s a bar graph showing the popularity of various social VR platforms by region: Europe, North America, Asia (excluding Japan), and Japan.</p>
<ol type="1">
<li><p><strong>VRChat</strong></p>
<ul>
<li><strong>Description</strong>: VRChat is a virtual reality social platform that allows user interaction through 3D character models. Users can explore and create virtual worlds <a href="https://en.m.wikipedia.org/wiki/VRChat#:~:text=VRChat%20is%20a%20virtual%20reality,Graham%20Gaylor%20and%20Jesse%20Joudrey">Wikipedia: VRChat</a>.</li>
<li><strong>Features</strong>: The platform supports user-created 3D avatars and worlds, focusing on immersive virtual reality social experiences <a href="https://en.wikipedia.org/wiki/VRChat#:~:text=VRChat%20is%20an%20online%20virtual,created%203D%20avatars%20and%20worlds">VRChat is an online virtual,created 3D avatars and worlds</a>.</li>
<li><strong>Accessibility</strong>: It is a free-to-play platform emphasizing user creation and community interaction in various virtual settings <a href="https://www.g2.com/articles/vrchat#:~:text=VRChat%20is%20an%20immersive%20virtual,by%20others%20using%20the%20platform">g2 VRChat</a>.</li>
</ul></li>
<li><p><strong>Cluster</strong></p>
<ul>
<li><strong>Description</strong>: <a href="https://cluster.mu/en/e#:~:text=,participate%20in%20at%20any%20time">Cluster</a> is a metaverse platform accessible from various devices, including smartphones, PCs, and VR. It allows users to gather and engage in virtual spaces.</li>
<li><strong>World Creation</strong>: Users can create their virtual worlds, with guides available for beginners to assist in world creation using tools like Unity and the <a href="https://help.cluster.mu/hc/en-us/articles/360042705211-Information-for-Beginners#:~:text=Creating%20Worlds%20World%20Creation%20Information,and%20the%20Cluster%20Creator%20Kit">Cluster Creator Kit</a>.</li>
<li><strong>Goal and Research</strong>: Cluster’s primary goal is to accelerate human creativity, backed by research in computer vision, computer graphics, human-computer interaction, and virtual reality. More about this can be found on their <a href="https://lab.cluster.mu/en/#:~:text=The%20Metaverse%20Lab%20leads%20Cluster%27s,aim%20is%20to%20produce">research lab page</a>.</li>
</ul></li>
<li><p><strong>Resonite</strong></p>
<ul>
<li><strong>Description</strong>: Resonite is a novel digital universe offering infinite possibilities, ranging from casual conversations and game playing to creative endeavors in art and game programming <a href="https://store.steampowered.com/app/2519830/Resonite/#:~:text=Resonite%20Enter%20a%20novel%20digital,184%29%20All%20Reviews">Steam: Resonite</a>.</li>
<li><strong>Features</strong>: It is a platform where users can socialize, build, create, and develop various forms of interactive content, emphasizing endless customization and community inclusion <a href="https://steamcommunity.com/app/2519830/guides/">Steam Community: Resonite</a>.</li>
<li><strong>Background</strong>: Developed by Yellow Dog Man Studios, Resonite originated from Neos VR’s former lead developer and focuses on user-generated content in a social VR context <a href="https://www.uploadvr.com/resonite-vr-steam-early-access/#:~:text=Developed%20by%20Yellow%20Dog%20Man,lead%20developer%2C%20Tom%C3%A1%C5%A1%20%E2%80%9CFrooxius%E2%80%9D%20Marian%C4%8D%C3%ADk">UploadVR: Resonite Early Access</a>.</li>
<li><strong>Launch and Accessibility</strong>: It launched into early access on SteamVR headsets and is a free-to-play metaverse platform on Steam <a href="https://www.roadtovr.com/neos-vr-spiritual-successor-resonite-reveal-steamvr/#:~:text=Resonite%2C%20a%20new%20social%20VR,Update%20%28October%203rd%2C%202023">RoadToVR</a></li>
</ul></li>
<li><p><strong>VirtualCast</strong></p>
<ul>
<li><strong>Description</strong>: VirtualCast is a metaverse communication service that allows sharing of extraordinary experiences with friends, featuring unique events, VR games, and personal spaces filled with memories.</li>
<li><strong>Functionality</strong>: It’s a VR real-time service tool that enables users to become a virtual character and live broadcast. Users can use pre-installed model characters or upload their own, requiring only a VR headset and a compatible PC.</li>
<li><strong>URLs</strong>:</li>
<li>Steam Store: <a href="https://store.steampowered.com/app/947890/VirtualCast/">VirtualCast on Steam</a></li>
</ul></li>
<li><p><strong>ChilloutVR</strong></p>
<ul>
<li><strong>Description</strong>: ChilloutVR is a social sandbox game that enables players and content creators to create, share, and explore content in a massive multiplayer metaverse. It supports VR and desktop modes, making it accessible with or without a VR headset.</li>
<li><strong>Gameplay and Community</strong>: The game focuses on social interaction, allowing players to meet new people and explore virtual worlds together.</li>
<li><strong>Development</strong>: Developed and published by Alpha Bend, ChilloutVR was released on Steam for Microsoft Windows on February 9, 2021.</li>
<li><strong>URLs</strong>:</li>
<li>Steam Store: <a href="https://store.steampowered.com/app/661130/ChilloutVR/">ChilloutVR on Steam</a></li>
<li>Ryan Schultz Blog: <a href="https://ryanschultz.com/2021/01/28/chilloutvr-a-brief-introduction/">ChilloutVR: A Brief Introduction</a></li>
<li>VR Fandom: <a href="https://vr.fandom.com/wiki/ChilloutVR">ChilloutVR - Virtual Reality Wiki</a></li>
</ul></li>
<li><p><strong>Rec Room</strong></p>
<ul>
<li><strong>Overview</strong>: <a href="https://en.wikipedia.org/wiki/Rec_Room_(video_game)#:~:text=Rec%20Room%20is%20a%20virtual,Gameplay">Rec Room</a> is a virtual reality massively multiplayer online game with an integrated game creation system, launched in 2016. It’s available on various platforms, including Microsoft Windows, Xbox, PlayStation, iOS, Android, and various VR headsets.</li>
<li><strong>Features</strong>: The platform is a hub for building and playing games, allowing users to explore millions of player-created rooms, chat, and hang out with friends worldwide. More about this can be found on their <a href="https://store.steampowered.com/app/471710/rec_room">Steam page</a> and <a href="https://recroom.com/#:~:text=00%3A30%20,from%20phones%20to%20VR%20headsets">official website</a>.</li>
<li><strong>Community and Accessibility</strong>: Rec Room fosters a global community for playing and creating games, offering cross-platform playability on everything from phones to VR headsets, and it’s free to use. More about this can be found on their <a href="https://pitchbook.com/profiles/company/156041-29#:~:text=Rec%20Room%20Rec%20Room%20Overview,to%20play%20and%20create%20games">Pitchbook profile</a>.</li>
</ul></li>
<li><p><strong>Mozilla Hubs</strong></p>
<ul>
<li><strong>Overview</strong>: Mozilla Hubs is a virtual collaboration platform, designed for educators, teams, and organizations, functioning directly in web browsers without requiring software downloads <a href="https://hubs.mozilla.com/#:~:text=Welcome%20to%20Mozilla%20Hubs%2C%20the,all%20while%20prioritizing%20your%20privacy">hubs.mozilla.com</a>.</li>
<li><strong>Functionality</strong>: It allows the creation of 3D spaces and provides a platform for remote connection, making it suitable for education and virtual meetings <a href="https://www.xrpedagogy.com/en/what-is-hubs-by-mozilla/">xrpedagogy</a>.</li>
<li><strong>Content Integration</strong>: Users can import diverse media types like 3D models, images, and videos from various sources in their virtual spaces <a href="https://hubs.mozilla.com/docs/intro-hubs.html#:~:text=In%20Hubs%20you%20can%20import,the%20top%20of%20the%20screen">hubs.mozilla.com/docs</a>.</li>
<li><strong>Accessibility</strong>: This hardware-agnostic platform is accessible on various devices, offering avatar customization and other features without needing permanent profiles <a href="https://www.makeuseof.com/how-to-use-mozilla-hubs-new-features/#:~:text=Mozilla%20Hubs%20is%20a%20free,with%20perks%20like%20avatar%20customization">makeuseof</a>.</li>
</ul></li>
<li><p><strong>Roblox</strong></p>
<ul>
<li><strong>Description</strong>: Roblox is an online game platform and game creation system, allowing users to program and play games created by others. It uses Lua for coding and hosts a variety of game genres <a href="https://en.wikipedia.org/wiki/Roblox#:~:text=Roblox%20,in%20the%20programming%20language%20Lua">Wikipedia: Roblox</a>.</li>
<li><strong>Features</strong>: It combines gaming, social media, and commerce. Users can socialize, build spaces, and engage in virtual commerce within this “ultimate virtual universe” <a href="https://blog.hootsuite.com/what-is-roblox/#:~:text=Roblox%20is%20an%20app%20that,earn%20and%20spend%20virtual%20money">what-is-roblox</a>.</li>
<li><strong>Functionality</strong>: Roblox is a platform and storefront for user-made games, rather than being a game itself. It enables users to create and play games developed by others <a href="https://www.polygon.com/22326123/what-is-roblox-explainer-public-offering#:~:text=Roblox%20is%20an%20online%20platform,this%20sense%2C%20it%20is%20more">what-is-roblox-explainer</a>.</li>
<li><strong>Vision</strong>: Roblox aims to empower people to create immersive experiences, reimagining how people collaborate creatively and socially <a href="https://corp.roblox.com/">corp.roblox.com</a>.</li>
<li><strong>Community</strong>: Launched in 2007, Roblox boasts 64 million monthly players and around 178 million accounts, positioning itself as an ‘Imagination Platform’ <a href="https://www.webwise.ie/parents/explainers/explained-what-is-roblox/#:~:text=Roblox%20advertises%20itself%20as%20an,million%20accounts%20on%20the%20platform">explained-what-is-roblox</a>.</li>
</ul></li>
<li><p><strong>Meta Horizon Worlds</strong></p>
<ul>
<li><strong>Description</strong>: <a href="https://en.wikipedia.org/wiki/Horizon_Worlds#:~:text=Meta%20Horizon%20is%20a%20virtual,Platforms%2C%20formerly%20known%20as%20Facebook">Meta Horizon</a> is a virtual reality platform enabling users to create, explore, and socialize in various virtual worlds. It offers profile and avatar customization to match user preferences and identities.</li>
<li><strong>Collaborative Platform</strong>: It’s known for its collaborative capabilities in VR, offering virtual realities and multiplayer games. More about this can be found on their <a href="https://horizon.meta.com/#:~:text=Explore%20Meta%20Horizon%20on%20Meta,that%20will%20bring%20your%20wildest">official website</a>.</li>
<li><strong>Components</strong>: The platform includes Meta Horizon Worlds, Meta Horizon Workrooms, and Meta Horizon Home, each serving different purposes like social VR experiences and virtual workrooms. More about this can be found on their <a href="https://www.meta.com/help/quest/articles/in-vr-experiences/social-features-and-sharing/what-is-horizon/#:~:text=Meta%20Horizon%20includes%20destinations%20like,currently%20available%20in%20select%20countries">help page</a>.</li>
<li><strong>Meta Accounts</strong>: In 2022, Meta introduced a new system for VR headset login that doesn’t require a Facebook account, further integrating users into the Meta Horizon ecosystem. More about this can be found on their <a href="https://about.fb.com/news/2022/07/meta-accounts-and-horizon-profiles-for-vr/#:~:text=July%207%2C%202022%20Takeaways%20In,your%20social%20profile%20in%20VR">news page</a>.</li>
</ul></li>
<li><p><strong>Overte</strong></p>
<ul>
<li><strong>Architecture</strong>: Overte provides a comprehensive VR experience through its interface and domain server, enabling users to explore VR worlds, socialize, and participate in events <a href="https://docs.overte.org/en/latest/explore/get-started/architecture.html">docs.overte.org</a>.</li>
<li><strong>Open Source Nature</strong>: As an open-source virtual world and social VR software, it supports both VR and desktop experiences, allowing users to create and host their own virtual worlds <a href="https://overte.org/#:~:text=About%20,VR%20events%2C%20and%20much%20more">overte</a> <a href="https://docs.overte.org/en/latest/#:~:text=Overte%20is%20open,in%20social">docs.overte.org/en/latest</a>.</li>
<li><strong>Community and Creativity</strong>: It fosters a community-focused environment where users can create, explore, and interact in various virtual worlds, emphasizing immersive and interactive experiences <a href="https://docs.overte.org/en/latest/explore.html#:~:text=Explore,interactive%20experience%20with%20realistic">docs.overte.org</a>.</li>
</ul></li>
<li><p><strong>Second Life</strong></p>
<ul>
<li><strong>Overview</strong>: Second Life is an online multimedia platform that allows users to create avatars for interacting with others and user-created content within a virtual world <a href="https://en.wikipedia.org/wiki/Second_Life#:~:text=,user%20online%20virtual%20world">Wikipedia: Second Life</a>.</li>
<li><strong>Characteristics</strong>: It is a free 3D virtual world and metaverse where users can create, connect, and communicate using voice and text, hosting a rich array of user-generated content <a href="https://secondlife.com/#:~:text=Second%20Life%20is%20a%20free,world%20using%20voice%20and%20text">secondlife.com</a>.</li>
<li><strong>Content and Economy</strong>: The platform supports real-time interaction and features a thriving in-world economy, launched in 2003 by Linden Lab <a href="https://www.makeuseof.com/what-is-second-life-history-metaverse/#:~:text=Second%20Life%20is%20a%20vast,at%20least%20the%20late%201990s">makeuseof: Second Life</a>.</li>
<li><strong>Functionality</strong>: Users in Second Life, known as residents, can do more than communicate; they can interact with various virtual environments and objects <a href="https://computer.howstuffworks.com/internet/social-networking/networks/second-life.htm#:~:text=Second%20Life%20is%20an%20online,than%20communicate%20with%20one%20another">howstuffworks: Second Life</a>.</li>
<li><strong>Applications</strong>: Second Life is used for various purposes, including music clubs, roleplaying, virtual cinemas, and hosting virtual meetings and classes <a href="https://secondlife.com/index.php?v=1&amp;lang=en-US#:~:text=Music%20clubs%2C%20roleplaying%20communities%2C%20virtual,for%20events%20and%20remote%20meetings">Second Life: Events</a>.</li>
</ul></li>
<li><p><strong>IMVU</strong></p>
<ul>
<li><strong>Description</strong>: IMVU is a leading friendship discovery and social platform, boasting a wide user base and ranking as a top-grossing app in both iOS/Apple App Store and Google Play Store. It allows millions of users to customize their avatars and explore over 40,000 destinations for social connections <a href="https://www.crunchbase.com/organization/imvu#:~:text=Contact%20Email%20socialmedia%40imvu,40%2C000%2B%20destinations%20to%20connect">CrunchBase: IMVU</a>.</li>
<li><strong>Avatar and Social Features</strong>: Known as the world’s largest avatar social platform, it enables users to create stunning collections of customizable avatars and unique 3D chat-based environments for immersive social experiences <a href="https://www.crunchbase.com/organization/imvu#:~:text=Contact%20Email%20socialmedia%40imvu,40%2C000%2B%20destinations%20to%20connect">crunchbase: IMVU</a>.</li>
<li><strong>Metaverse Characteristics</strong>: IMVU is considered a metaverse where users can shop for clothing, furniture, and accessories, engage in user-generated content, and maintain a safe online identity. It combines aspects of virtual reality with an e-commerce engine and 3D characters <a href="https://openstax.org/books/entrepreneurship/pages/10-1-launching-the-imperfect-business-lean-startup#:~:text=After%20his%20first%20startup%20proved,D%20characters">IMVU: Lean Startup</a>.</li>
<li><strong>Digital Economy Integration</strong>: The platform has integrated blockchain technology with the creation of VCOIN, an ERC-20 token, enhancing its digital currency capabilities and peer-to-peer transactions <a href="https://www.prnewswire.com/news-releases/imvu-sets-new-standard-for-digital-currencies-with-vcoin-launch-301207660.html#:~:text=Created%20by%20IMVU%2C%20the%20world%27s,peer">prnewswire: VCOIN</a>.</li>
</ul></li>
<li><p><strong>VKet Cloud</strong></p>
<ul>
<li><strong>Description</strong>: VKet Cloud is a development engine designed to deploy metaverse services directly in the browser, catering to creators and business users.</li>
<li><strong>Accessibility and Features</strong>: The platform emphasizes ease of access as it operates in the browser, eliminating the need for high-performance PCs, IT knowledge, or VR goggles. It allows for creating personal metaverses and supports features like voice and text chat.</li>
<li><strong>URLs</strong>:</li>
<li>VKet Cloud: <a href="https://cloud.vket.com/">Vket Cloud ｜ Develop your own virtual world service</a></li>
<li>VKet Magazine: <a href="https://magazine.vket.com/vketcloud-tour/">Vket Cloud Commentary Article</a></li>
<li>The Metaculture: <a href="https://www.themetaculture.co/articles/hikky-expands-with-vket-cloud-an-engine-that-works-on-your-phone-and-its-free">HIKKY Expands With Vket Cloud</a></li>
</ul></li>
<li><p><strong>xambr social VR (Tokyo Game Show VR)</strong></p>
<ul>
<li><strong>Description</strong>: Tokyo Game Show VR is a virtual space that hosts the Tokyo Game Show, offering a super-participatory experience where attendees can explore as avatars and enjoy special content from various exhibitors and sponsors.</li>
<li><strong>Platform and Accessibility</strong>: It operates on the Xambr social VR platform, accessible via Oculus Quest, PC VR headsets, and regular PCs, ensuring wide availability for different users.</li>
<li><strong>Experience</strong>: The virtual world of TGS is divided into several “islands,” providing an exploratory experience where attendees can teleport between islands and visit virtual booths.</li>
<li><strong>URLs</strong>:</li>
<li>Tokyo Game Show VR: <a href="https://www.tgsvr.com/">TOKYO GAME SHOW VR 2023</a></li>
<li>UploadVR: <a href="https://www.uploadvr.com/tokyo-game-show-vr-how-to-attend/">Tokyo Game Show VR: How To Attend</a></li>
<li>Skarred Ghost: <a href="https://skarredghost.com/2023/10/05/tokyo-game-show-vr-2023-feels-like-a-magical-trip-to-a-fantasy-japanese-theme-park/">Tokyo Game Show VR 2023 feels like a magical trip</a></li>
</ul></li>
</ol>


</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/110_peer_platforms.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/120_inspirations.html</link>
  <description><![CDATA[ 




<section id="inspirations" class="level1">
<h1>Inspirations</h1>
<section id="inspiration-desynced-autonomous-colony-simulator" class="level2">
<h2 class="anchored" data-anchor-id="inspiration-desynced-autonomous-colony-simulator">Inspiration: Desynced: Autonomous Colony Simulator</h2>
<p>“Desynced: Autonomous Colony Simulator” is a sci-fi strategy game that stands out due to its focus on fully customizable units and behaviors. Players gather resources, construct buildings, research, and explore unknown territories in the game. The game can be enjoyed solo or with friends, offering a cooperative or individual gameplay experience.</p>
<p>A unique feature of “Desynced” is the enigma surrounding an AI on the verge of self-awareness. Players are tasked with uncovering the hidden truths within this narrative, adding an element of intrigue to the game.</p>
<p>The game combines strategy, automation, and exploration, providing players a dynamic and engaging experience. It emphasizes survival in a sci-fi setting, where players must gather, build, and fight to sustain their colony.</p>
<p>Automating processes and managing a colony against an unfolding story about a self-aware AI adds depth to the gameplay.</p>
<ul>
<li><a href="https://store.steampowered.com/app/1450900/Desynced_Autonomous_Colony_Simulator/">Desynced: Autonomous Colony Simulator</a></li>
</ul>
</section>
</section>
<section id="inspiration-oxeye-games-demake-of-homeworld" class="level1">
<h1>Inspiration: Oxeye Games’ demake of Homeworld</h1>
<p>There is interest in adapting Oxeye Games’ demake of Homeworld for a game jam. This adaptation would bring the iconic space strategy game into the exciting realm of virtual reality.</p>
<p>The game’s objective remains unchanged: players must navigate through space searching for their ancestral planet while defending against malevolent extraterrestrials intent on their destruction. The Command Vessel serves as the heart of the player’s fleet, acting as both the resource collection point and the hub for unit construction.</p>
<p>The design goals present an exciting challenge. They involve converting the simplified 2D version into a 3D perspective, but this time within an immersive VR environment. The aim is to maintain the essential elements that define the game, including the strategic/tactical switch, while enhancing the player’s sense of presence and immersion.</p>
<p>Beyond these foundational ideas, there will be significant creative freedom to craft a unique VR experience. The focus could be on enhancing the “micro” aspect, which ensures smooth control and response during unit movement, and creating a balanced tech tree, all within the confines of a VR interface.</p>


</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/120_inspirations.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/140_game.html</link>
  <description><![CDATA[ 




<section id="v-sekai-game-discussion" class="level1">
<h1>V-Sekai Game Discussion</h1>
<section id="gadget-mechanics" class="level2">
<h2 class="anchored" data-anchor-id="gadget-mechanics">Gadget Mechanics</h2>
<p>Gadgets play a crucial role in enhancing the gameplay mechanics. Each gadget provides unique abilities that can be utilized strategically within the team-based system:</p>
<ul>
<li><strong>Object Manipulation</strong>: Can create barriers or clear paths, aiding in strategic planning and resource management.</li>
<li><strong>Long-Range Targeting</strong>: Useful for snipers or scouts in the team, allowing them to take down targets from a distance. This is not limited to guns but includes any form of ranged gadget.</li>
<li><strong>Spell Casting</strong>: Adds complexity to combat situations. Spells can heal teammates, enhance their abilities, or damage enemies.</li>
<li><strong>Tactical Overlay</strong>: Provides real-time data about the battlefield, including enemy positions, terrain features, and resource locations.</li>
</ul>
</section>
<section id="contextual-factors-and-gameplay-mechanics" class="level2">
<h2 class="anchored" data-anchor-id="contextual-factors-and-gameplay-mechanics">Contextual Factors and Gameplay Mechanics</h2>
<p>The game we’re discussing is set in a post-apocalyptic future where humanity has colonized the solar system. It’s an open-world game with classless character progression. The gameplay involves player versus player (PvP) and player versus environment (PvE) scenarios, with players forming alliances and strategizing to protect humanity from existential threats. Decisions made in the game can shape the future of the virtual universe.</p>
<p>The gameplay mechanics are designed around a team-based system, encouraging players to form teams and develop strategies under the leadership of a lead. This design promotes strategic planning and effective resource management among players.</p>
</section>
<section id="player-experience" class="level2">
<h2 class="anchored" data-anchor-id="player-experience">Player Experience</h2>
<p>The essence of this game lies in its cooperative environment that rewards teamwork. Challenges and obstacles require a collective effort and strategy. Victory over obstacles is a shared experience, creating a sense of camaraderie among players.</p>
<p>“Skill gates” are a unique feature in the game that serve as checkpoints. These gates require players to demonstrate a specific skill they’ve learned to progress.</p>
<p>The level design plays a crucial role in ensuring that players acquire the necessary skills and abilities before encountering significant challenges. This is achieved through various means:</p>
<ul>
<li><strong>Progressive Difficulty</strong>: Early levels are relatively straightforward, allowing players to learn the basic mechanics and controls of the game.</li>
<li><strong>Skill-Based Challenges</strong>: Obstacles that require certain skills to overcome.</li>
<li><strong>Rewarding Exploration</strong>: Hidden areas or secret paths might contain power-ups or abilities to help players in future challenges.</li>
<li><strong>Boss Battles</strong>: Placed at the end of levels or sections, these act as tests of the skills and abilities players have gained throughout the level.</li>
</ul>
</section>
<section id="teamwork-over-solo-play" class="level2">
<h2 class="anchored" data-anchor-id="teamwork-over-solo-play">Teamwork Over Solo Play</h2>
<p>In this game, teamwork is given more importance than solo play. This design choice reflects the game’s cooperative nature, where players are encouraged to form parties or teams and face challenges together.</p>
<p>The game’s cooperative gameplay design ensures that many of its missions and challenges are best tackled as a team. The game allows players to form parties or teams to support this cooperative gameplay.</p>
</section>
<section id="custom-avatars-and-voice-chat" class="level2">
<h2 class="anchored" data-anchor-id="custom-avatars-and-voice-chat">Custom Avatars and Voice Chat</h2>
<p>The game offers two key features that significantly enhance the player experience: custom avatars and voice chat.</p>
<ul>
<li><strong>Custom Avatars</strong>: Empowers players to craft unique, personalized characters or avatars, using VRM or custom Godot scenes to represent themselves within the game world.</li>
<li><strong>Voice Chat</strong>: Provides a platform for real-time communication between players. It’s a vital tool for strategic planning and coordination among team members.</li>
</ul>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/140_game.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/141_game_mvp.html</link>
  <description><![CDATA[ 




<section id="v-sekai-game-discussion" class="level1">
<h1>V-Sekai Game Discussion</h1>
<section id="gadget-mechanics" class="level2">
<h2 class="anchored" data-anchor-id="gadget-mechanics">Gadget Mechanics</h2>
<p>In the world of V-Sekai, gadgets play a crucial role in gameplay. They provide players with unique abilities that can significantly influence the outcome of their missions.</p>
<p>One such gadget is the <strong>Object Manipulation</strong> tool. This gadget allows players to create barriers or clear paths, providing them with strategic advantages during gameplay. This tool offers many tactical possibilities, whether blocking an enemy’s path or creating a safe passage for allies.</p>
<p>Another essential gadget is the <strong>Tactical Overlay</strong>. This tool provides players with real-time data about the battlefield, including the positions of enemies and the locations of resources. This information lets players make informed decisions and plan their strategies effectively.</p>
</section>
<section id="contextual-factors-and-gameplay-mechanics" class="level2">
<h2 class="anchored" data-anchor-id="contextual-factors-and-gameplay-mechanics">Contextual Factors and Gameplay Mechanics</h2>
<p>V-Sekai is in a post-apocalyptic future where players must navigate PvP (Player versus Player) and PvE (Player versus Environment) scenarios. The game encourages players to form alliances and strategize to protect humanity from the threats lurking in this dystopian world. The team-based system promotes strategic planning and resource management, adding another layer of complexity to the gameplay.</p>
</section>
<section id="player-experience" class="level2">
<h2 class="anchored" data-anchor-id="player-experience">Player Experience</h2>
<p>The game places a strong emphasis on teamwork. Many challenges require a collective effort from the players, making cooperation and coordination key to success. “Skill gates” serve as checkpoints that require specific skills to pass, ensuring that players are adequately prepared for the challenges ahead.</p>
<p>The level design in V-Sekai ensures that players acquire the necessary skills before facing major challenges. This is achieved through:</p>
<ul>
<li><strong>Progressive Difficulty</strong>: The early levels are relatively easy, allowing players to learn the game’s basic mechanics.</li>
<li><strong>Skill-Based Challenges</strong>: These obstacles require players to use certain skills, encouraging them to master these abilities.</li>
<li><strong>Rewarding Exploration</strong>: Hidden areas may contain power-ups, incentivizing players to explore the game world.</li>
<li><strong>Boss Battles</strong>: These encounters serve as tests of the skills that players have gained throughout the level.</li>
</ul>
</section>
<section id="teamwork-over-solo-play" class="level2">
<h2 class="anchored" data-anchor-id="teamwork-over-solo-play">Teamwork Over Solo Play</h2>
<p>V-Sekai prioritizes teamwork over solo play. The missions and challenges are designed to be best tackled as a team. To facilitate this, the game allows players to form teams.</p>
</section>
<section id="custom-avatars-and-voice-chat" class="level2">
<h2 class="anchored" data-anchor-id="custom-avatars-and-voice-chat">Custom Avatars and Voice Chat</h2>
<p>Two key features that enhance the player experience in V-Sekai are custom avatars and voice chat.</p>
<p>The <strong>Custom Avatars</strong> feature allows players to craft unique characters using VRM or custom Godot scenes. This gives players the opportunity to express their creativity and individuality within the game.</p>
<p>The <strong>Voice Chat</strong> feature facilitates real-time communication between players. This not only enhances the social aspect of the game but also makes coordinating strategies with teammates much easier.</p>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/141_game_mvp.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/150_mvp.html</link>
  <description><![CDATA[ 




<section id="mvp-with-rigid-body-physics" class="level1">
<h1>MVP with Rigid Body Physics</h1>
<section id="key-features" class="level2">
<h2 class="anchored" data-anchor-id="key-features">Key Features</h2>
<ol type="1">
<li><strong>VR Prototype</strong>: A primary VR environment with one avatar and one chair.</li>
<li><strong>Physics</strong>: The chair behaves as a rigid body, reacting to forces applied by the avatar. The chair has position, rotation, angular, and linear velocity properties.</li>
<li><strong>Object Interaction</strong>: The avatar can interact with the chair (e.g., sit on it, push it).</li>
<li><strong>Event-Driven</strong>: The system is designed to respond to events (like an avatar sitting on the chair) instead of being updated every frame.</li>
<li><strong>State Changes</strong>: The avatar and chair states change based on their interaction.</li>
<li><strong>Mastership vs Ownership</strong>: The master simulates the physics of the objects, while the owner controls the objects’ actions.</li>
<li><strong>Networking</strong>: The state changes are sent to the server and synchronized across all clients.</li>
</ol>
</section>
<section id="development-steps" class="level2">
<h2 class="anchored" data-anchor-id="development-steps">Development Steps</h2>
<ol type="1">
<li><strong>Create the VR Environment</strong>: Use Godot to create a simple VR environment with one avatar and one chair.</li>
<li><strong>Upload and Validate Visual Mesh, Colliders, and Skeletons</strong>: Upload the visual mesh, colliders, and skeletons for both the chair and the avatar. Validate these assets to ensure they meet the requirements for the VR environment.</li>
<li><strong>Implement Physics</strong>: Make the chair a rigid body that can react to forces. For example, if the avatar pushes the chair, it should move accordingly. The chair’s state includes its position, rotation, linear, and angular velocity.</li>
<li><strong>Implement Object Interaction</strong>: Allow the avatar to interact with the chair, including sitting on the chair or applying force.</li>
<li><strong>Handle State Changes</strong>: When the avatar interacts with the chair, update the states of both the avatar and the chair. This includes the chair’s position, rotation, linear velocity, and angular velocity if it has been moved.</li>
<li><strong>Implement Event-Driven Logic</strong>: Instead of updating the game state every tick, use signals in Godot to trigger updates when certain events occur. For example, when the avatar sits on the chair, it emits a signal that triggers the state update.</li>
<li><strong>Set Up Networking</strong>: Set up a client-server network model using Elixir. When the state changes occur, could you send them to the server? The server then updates the game state and returns it to the client(s).</li>
<li><strong>Encode State Changes</strong>: Before sending the state changes over the network, encode them to ensure efficient parsing and hash-consistent representations.</li>
<li><strong>Implement Mastership and Ownership</strong>: Assign mastership and ownership roles for each object in the VR environment. The master will be responsible for simulating the physics of the objects, while the owner will control the objects’ actions.</li>
<li><strong>Test the System</strong>: Test the system by interacting with the chair in the VR environment. Check if the state changes, including those related to physics, are correctly sent to the server and synchronized across all clients.</li>
</ol>
<p>This proof of concept will allow us to validate our approach and identify potential issues early in development. Once this basic functionality works, we can incrementally add more features, such as additional interactive objects and avatars, more complex physics interactions, etc.</p>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/150_mvp.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/150_vr_cursor.html</link>
  <description><![CDATA[ 




<section id="vr-cursor" class="level1">
<h1>VR Cursor</h1>
<p>Add the concept of a vr cursor that gives us more precision than a rough swipe.</p>


</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/150_vr_cursor.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/151_avoid_n_squared_state_updates.html</link>
  <description><![CDATA[ 




<section id="avoiding-the-onn-state-update-problem" class="level1">
<h1>Avoiding the O(n^n) State Update Problem</h1>
<p>The O(n^n) state update problem arises when every change in state requires updating all other states, leading to an exponential increase in computations as the number of states (n) increases. This can be a significant issue in a VR environment with many interactive objects and players.</p>
<p>To avoid this problem, we can use the following strategies:</p>
<section id="incremental-state-updates" class="level3">
<h3 class="anchored" data-anchor-id="incremental-state-updates">1. Incremental State Updates</h3>
<p>As mentioned earlier, when an avatar interacts with an object like a chair, only the relevant changes to the state are recorded and sent to the server. This means that instead of updating the entire state for every interaction, we only modify the parts of the state that have changed.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode elixir code-with-copy"><code class="sourceCode elixir"><span id="cb1-1">server<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>put<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">(</span>chair_path, %<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">occupied:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">occupied_by:</span> avatar_id<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">})</span></span>
<span id="cb1-2">server<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>put<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">(</span>avatar_path, %<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sitting:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sitting_on:</span> chair_id<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">})</span></span></code></pre></div>
<p>This approach significantly reduces the amount of data that needs to be processed and transmitted, making it much more efficient.</p>
</section>
<section id="event-driven-updates" class="level3">
<h3 class="anchored" data-anchor-id="event-driven-updates">2. Event-Driven Updates</h3>
<p>Instead of continuously updating all states, we can use an event-driven model where updates are triggered by specific events. For example, when an avatar sits on a chair, an event is triggered which updates the states of the avatar and the chair. This way, we only perform updates when necessary, reducing the computational load.</p>
</section>
<section id="spatial-partitioning" class="level3">
<h3 class="anchored" data-anchor-id="spatial-partitioning">3. Spatial Partitioning</h3>
<p>In a large VR environment, not all objects interact with each other. We can divide the environment into smaller regions or partitions, and only update the states within the same partition. This technique, known as spatial partitioning, can greatly reduce the number of state updates required.</p>
</section>
<section id="prioritizing-updates" class="level3">
<h3 class="anchored" data-anchor-id="prioritizing-updates">4. Prioritizing Updates</h3>
<p>Not all state updates are equally important. Some updates might have a bigger impact on the game than others. By prioritizing updates based on their importance, we can ensure that the most critical updates are processed first, improving the overall performance and responsiveness of the game.</p>
<p>By using these strategies, we can avoid the O(n^n) state update problem and ensure that our VR environment remains scalable and efficient, even as the number of players and interactions increases.</p>


</section>
</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/151_avoid_n_squared_state_updates.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://v-sekai.github.io/manuals/demo_to_game/152_references.html</link>
  <description><![CDATA[ 




<section id="references" class="level1">
<h1>References</h1>
<p>Here are the updated references with the full URLs repeated for your convenience:</p>
<ol type="1">
<li><p><strong>VR Prototype</strong></p>
<ul>
<li>Virtual Reality: Prototyping for VR
<ul>
<li>Full URL: <a href="https://www.oreilly.com/library/view/virtual-reality/9781491922827/ch04.html">https://www.oreilly.com/library/view/virtual-reality/9781491922827/ch04.html</a></li>
</ul></li>
</ul></li>
<li><p><strong>Physics</strong></p>
<ul>
<li>Real-Time Physics Simulation Forum: Rigid Body Dynamics
<ul>
<li>Full URL: <a href="https://pybullet.org/Bullet/phpBB3/viewforum.php?f=4&amp;sid=cd32b8f8490e84932662a76461055563">https://pybullet.org/Bullet/phpBB3/viewforum.php?f=4&amp;sid=cd32b8f8490e84932662a76461055563</a></li>
</ul></li>
<li>Godot Engine Documentation: Using Rigid Bodies
<ul>
<li>Full URL: <a href="https://docs.godotengine.org/en/stable/tutorials/physics/rigid_bodies.html">https://docs.godotengine.org/en/stable/tutorials/physics/rigid_bodies.html</a></li>
</ul></li>
</ul></li>
<li><p><strong>Event-Driven</strong></p>
<ul>
<li>Game Programming Patterns: Event Queue
<ul>
<li>Full URL: <a href="http://gameprogrammingpatterns.com/event-queue.html">http://gameprogrammingpatterns.com/event-queue.html</a></li>
</ul></li>
</ul></li>
<li><p><strong>State Changes</strong></p>
<ul>
<li>Gamasutra: Understanding State Machines
<ul>
<li>Full URL: <a href="https://www.gamasutra.com/view/feature/132083/understanding_state_machines.php">https://www.gamasutra.com/view/feature/132083/understanding_state_machines.php</a></li>
</ul></li>
</ul></li>
<li><p><strong>Mastership vs Ownership</strong></p>
<ul>
<li>High Fidelity: Entity Ownership
<ul>
<li>Full URL: <a href="https://docs.highfidelity.com/create-and-explore/entities/entity-ownership">https://docs.highfidelity.com/create-and-explore/entities/entity-ownership</a></li>
</ul></li>
</ul></li>
<li><p><strong>Networking</strong></p>
<ul>
<li>Godot Engine Documentation: High-level Multiplayer
<ul>
<li>Full URL: <a href="https://docs.godotengine.org/en/stable/tutorials/networking/high_level_multiplayer.html">https://docs.godotengine.org/en/stable/tutorials/networking/high_level_multiplayer.html</a></li>
</ul></li>
<li>Elixir School: Basics of OTP Concurrency
<ul>
<li>Full URL: <a href="https://elixirschool.com/en/lessons/advanced/otp-concurrency/">https://elixirschool.com/en/lessons/advanced/otp-concurrency/</a></li>
</ul></li>
</ul></li>
<li><p><strong>Encode State Changes</strong></p>
<ul>
<li>Elixir Guide: Working with JSON in Elixir
<ul>
<li>Full URL: <a href="https://lobotuerto.com/blog/working-with-json-in-elixir/">https://lobotuerto.com/blog/working-with-json-in-elixir/</a></li>
</ul></li>
</ul></li>
<li><p><strong>Test the System</strong></p>
<ul>
<li>Godot Engine Documentation: Testing
<ul>
<li>Full URL: <a href="https://docs.godotengine.org/en/stable/getting_started/workflow/testing/index.html">https://docs.godotengine.org/en/stable/getting_started/workflow/testing/index.html</a></li>
</ul></li>
</ul></li>
<li><p>Serialization Strategies</p>
<ul>
<li>Full URL: <a href="https://gafferongames.com/post/serialization_strategies/">https://gafferongames.com/post/serialization_strategies/</a></li>
</ul></li>
<li><p>Networked Physics in Virtual Reality</p>
<ul>
<li>Full URL: <a href="https://www.youtube.com/watch?v=sx4IIQL0x7c">https://www.youtube.com/watch?v=sx4IIQL0x7c</a></li>
</ul></li>
<li><p>Godot Engine Proposal</p>
<ul>
<li>Full URL: <a href="https://github.com/godotengine/godot-proposals/issues/3375">https://github.com/godotengine/godot-proposals/issues/3375</a></li>
</ul></li>
<li><p>Host your Unreal Engine game for under $1 USD</p>
<ul>
<li>Full URL: <a href="https://aws.amazon.com/blogs/gametech/how-to-host-your-unreal-engine-game-for-under-1-per-player-with-amazon-gamelift/">https://aws.amazon.com/blogs/gametech/how-to-host-your-unreal-engine-game-for-under-1-per-player-with-amazon-gamelift/</a></li>
</ul></li>
</ol>


</section>

 ]]></description>
  <guid>https://v-sekai.github.io/manuals/demo_to_game/152_references.html</guid>
  <pubDate>Wed, 24 Apr 2024 03:19:20 GMT</pubDate>
</item>
</channel>
</rss>
