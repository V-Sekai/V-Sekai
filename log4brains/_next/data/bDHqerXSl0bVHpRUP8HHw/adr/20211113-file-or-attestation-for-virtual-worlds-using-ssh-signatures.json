{"pageProps":{"projectName":"V-Sekai","currentAdr":{"slug":"20211113-file-or-attestation-for-virtual-worlds-using-ssh-signatures","package":null,"title":"File or attestation for virtual worlds using ssh signatures","status":"draft","supersededBy":null,"tags":["v-sekai",""],"deciders":["V-Sekai",""],"body":{"enhancedMdx":"\n## Context and Problem Statement\n\nFile or attestation for virtual worlds\n\n## Describe the proposed option and how it helps to overcome the problem or limitation\n\nUse ssh signatures. \n\n## Describe how your proposal will work, with code, pseudo-code, mock-ups, or diagrams\n\nAn analogy of a CD and a CD case with stickers.\n\n### File attestation\n\nRead your public key.\n\n```\n$ ssh-add -L > me.pub # Can be related to a X.509 `.crt`\n```\n\nCreate a file.\n```\n$ touch avatar-sample.vrm\n```\n\nSign your file.\n\n```\n$ ssh-keygen -Y sign -f me.pub -n \"avatar@v-sekai.org\" avatar-sample.vrm\n```\n\nWrite signature to avatar-sample.vrm.sig # Can be attested by multiple people with multiple `.sig`\n\n```\n$ echo -n ernest.lee@chibifire.com (String | cat - <(echo -n \" \") | cat - <(ssh-add -L) > allowed_signers # Can have more than one line. T\n```\n\nThe allowed_signers file associates a string that represents a person (Principle) to a Public Key.\n\n```\n$ ssh-keygen -Y verify -f allowed_signers -I ernest.lee@chibifire.com -n \"avatar@v-sekai.org\" -s avatar-sample.vrm.sig < avatar-sample.vrm\nGood \"avatar@v-sekai.org\" signature for ernest.lee@chibifire.com with RSA key SHA256:W7APE+9tyFUdGzzcYCwcdknWm0vb1KPso8XogFP2u+k\n```\nReferenced https://www.agwa.name/blog/post/ssh_signatures\n\n\n### List of uses for ssh signatures\n\nSSH signatures can be used for:\n\n1. Use for verifying binaries\n2. Use for verifying game modifications\n3. Used for lobby servers to prove to the player that they are official.\n4. Double sided friending\n\n### How to use a x509 certificate for ssh login\n\n```bash\n# Extract the private key from the P12:\nopenssl pkcs12 -in my_cert.p12 -out my_cert.pem -nodes\nopenssl pkcs12 -in my_cert.p12 -out my_sshkeys.pem -nodes -nocerts\n# Finally extract the public key from the certificate PEM file and append it to the private key:\nopenssl x509 -in my_cert.pem -pubkey -noout >> my_sshkeys.pem\n# my_cert.pem can now be removed. It is not required anymore.\n# You can use ssh-keygen to create the line to put into your remote `~/.ssh/authorized_keys` file:\nssh-keygen -i -m PKCS8 -f my_sshkeys.pem\neval \"$(ssh-agent -s)\"\nssh-add my_sshkeys.pem\n# https://trueg.wordpress.com/2012/09/06/use-an-x-509-certificate-for-ssh-login/\n# TODO: fire 2021-11-13 use mbedtls only\n```\n\n### Encrypt files\n\nA common recommendation is not to combine encryption with authentication.\n\nUse your SSH signature to sign a enveloped list of X.509 certificates and use SMIME.\n\n### Create SSH Certificates\n\nssh-keygen -f CA\nssh-keygen -s CA -I fire@example.com -n avatar@V-Sekai.com -V +1h KEYFILE.pub\n\nssh-keygen -Us <(ssh-add -L) -I fire@example.com -n avatar@V-Sekai.com -V +1h KEYFILE.pub\n\n### Distributing keys\n\n```bash\n# Resulting file is namespace.allowed_signers but uri_encoded.\ncurl https://github.com/fire.keys > avatars%40V-Sekai.com.allowed_signers # Needs a id in email syntax in front of a key \ncurl files://uro > avatars%40V-sekai.com.allowed_signers # Assumed in correct format\ncurl http://matrix-homeserver.example.com/fire > avatars%40V-sekai.com.allowed_signers # Assumed in correct format\n```\n\n### Envelope\n\n```bash\n# Uncompressed zip\n\nAvoid compression explosions.\n\n1. zip AvatarSample_A.vrm.sig\n2. zip AvatarSample_A.vrm \n\n# Email multipart\n\n1. Use email multipart\n```\n\n## Positive Consequences <!-- optional -->\n\n- Able to distribute a game launcher.\n- Able to add a makers mark to items.\n\n## Negative Consequences <!-- optional -->\n\n- [e.g., compromising quality attribute, follow-up decisions required, â€¦]\n\n[this section can be repeated for each option if more than one option is open for consideration]\n\n## Option graveyard: <!-- same as above -->\n\n- Option: Matrix \n- Rejection Reason: Technically complicated to devops start and multiple layers compared to an offline approach.\n\n- Option: Ipfs and Etherium \n- Rejection Reason: Requires a globally distributed database.\n\n## If this enhancement will not be used often, can it be worked around with a few lines of script?\n\nNot able to use a few lines of code.\n\n## Is there a reason why this should be core and done by us?\n\nWe have to define the trust.\n\n## References <!-- optional -->\n\n- https://github.com/V-Sekai/\n- https://github.com/sigstore/rekor/tree/main/pkg/pki/ssh\n- https://stackoverflow.com/questions/4629537/how-to-encrypt-data-in-php-using-public-private-keys\n- https://stackoverflow.com/questions/60160082/how-to-achieve-openssl-smime-encrypt-with-public-key-functionality-in-code\n\n## Derivative License\n\nCopyright (c) 2020-2021 V-Sekai contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"},"creationDate":"2021-11-14T00:17:37.000Z","lastEditDate":"2021-11-14T18:18:49.000Z","lastEditAuthor":"K. S. Ernest (iFire) Lee","publicationDate":null,"file":{"relativePath":"docs/decisions/20211113-file-or-attestation-for-virtual-worlds-using-ssh-signatures.md","absolutePath":"/home/runner/work/v-sekai-proposals/v-sekai-proposals/docs/decisions/20211113-file-or-attestation-for-virtual-worlds-using-ssh-signatures.md"},"repository":{"provider":"github","viewUrl":"https://github.com/V-Sekai/v-sekai-proposals/blob/master/docs/decisions/20211113-file-or-attestation-for-virtual-worlds-using-ssh-signatures.md"}},"l4bVersion":"1.0.0-beta.11"},"__N_SSG":true}